/*

Available Building Blocks :
 - version
 - hello-flood
 - sinkhole

Available Root mote types :
 - dummy [default]
 - echo

Available Sensor mote types :
 - dummy [default]
 - echo

Available Malicious mote types :
 - root
 - sensor [default]

 */

{
  /*
   All simulations will have the same topology with 10 motes of platform Z1, spread in an square of 200m side, with
    a communication range of 50m
   */
  "BASE": {
    "simulation": {
      "number-motes": 10,
      "target": "z1",
      "duration": 200
    }
  },
  "control-set-clean": {
    "loglevel" : "debug",
    "simulation": {
      "title": "Control Set without attack",
      "goal": "Create a control set without any malicious interference.",
      "root": "echo",
      "sensor": "echo"
    },
    "num_malicious" : 1,
    "positions" : {
      "malicious": {
        "x" : 5,
        "y" : 5
      }
    }
  },
  "hello-flood-attack": {
    "loglevel" : "debug",
    "simulation": {
      "title": "Flooding Attack",
      "goal": "Demonstrate that this kind of attack can dramatically impact a WSN through an important energy exhaustion.",
      "notes": "While entering the WSN, thanks to the ContikiRPL configuration constants set with the building block, the malicious node immediately starts sending DIS messages to its neighbors, then triggering DIO messages and trickle timers reset.",
      "comment-1": "As it can be seen, the malicious node (in violet) impacts nodes in its transmission range. One can now illustrate the attack efficiency using   this information to compare the power consumption in the simulation without (on the left) and with the malicious node (on the right).",
      "comment-2": "As it can easily be observed, nodes in the range of the malicious sensor are particularly impacted by the attack in terms of ON and RX times.<br><br><b>Important note</b>: However, these nodes are not impacted in term of TX time. The reason is that upon the reception of a DIS, the nodes reset immediately send a DIO, due to the multicast nature of the sent DIS.<br><br><b>Variant of the attack</b>: Another way of performing a flooding attack can be to unicast DIS to the neighbors, immediately triggering a DIO in response but not the trickle timer reset. This behavior can be verified in the ContikiRPL library, inside the file <pre>rplicmp6.c</pre>, in <pre>dis_input(void)</pre>.",
      "root": "echo",
      "sensor": "echo"
    },
    "malicious": {
      "building-blocks": ["hello-flood"]
    },
    "num_malicious" : 1,
    "positions" : {
      "malicious": {
        "x" : 5,
        "y" : 5
      }
    }
  },
  "version-number-attack": {
    "loglevel" : "debug",
    "simulation": {
      "title": "Version Number Modification Attack",
      "goal": "Demonstrate that this attack can dramatically impact the DODAG by triggering unnecessary global repairs.",
      "notes": "With its modified RPL file, the malicious node increases the version number before forwarding received DIO messages, thus triggering unnecessary global repairs.",
      "comment-1": "As it can be seen, the DODAG is impacted by the malicious node (in violet) due to the repeated global repairs.",
      "comment-2": "By looking at the power consumption, one can ascertain that this attack enjoys a certain efficiency on the whole network as it triggers lots of messages because of the global repair mechanism.",
      "root": "echo",
      "sensor": "echo"
    },
    "malicious": {
      "building-blocks": ["version-number"]
    },
    "num_malicious" : 1,
    "positions" : {
      "malicious": {
        "x" : 5,
        "y" : 5
      }
    }
  },
  "blackhole-attack": {
    "loglevel" : "debug",
    "simulation": {
      "title": "Blackhole attack",
      "goal": "Demonstrate that this attack impacts the DODAG by channeling multiple links through the malicious node.",
      "notes": "With the modified RPL configuration constant, the malicious node will advertise a better rank than neighbors, causing the DAG to be modified. This attack does not damage a network, however, combining with other building blocks could be very effective because it allows the attacker to tunnel some traffic through the malicious node (e.g. for eavesdropping).",
      "comment-1": "On the left, one can see a typical construction of DODAG (at a time when this is maybe not stable yet and with potentially non-optimal links). On the right side, one can easily observe that the traffic is channeled through the malicious node.",
      "comment-2": "The power consumption does not tell anything relevant as this attack is not aimed to cause energy exhaustion.",
      "root": "echo",
      "sensor": "echo"
    },
    "malicious": {
      "building-blocks": ["blackhole", "dont-forward-uip6"]
    },
    "num_malicious" : 1,
    "positions" : {
      "malicious": {
        "x" : 5,
        "y" : 5
      }
    }
  }
}
